"""
for this to run need to do:
    pip install numpy matplotlib pandas scikit-learn
"""


import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from sklearn.ensemble import RandomForestClassifier

#used to divide dataset into train and test
from sklearn.model_selection import train_test_split
#used to classify the model
from sklearn.ensemble import RandomForestClassifier
# used to see how good or bad our model is trained
from sklearn.metrics import confusion_matrix


""" ML Overview:
We are currently using Random forest but will think of transitioning to Neural Networks.
Random forest technique: works well for clasification.

Steps:
    1- build new datasets form given dataset
    2- use decision trees on each dataset (really important to use random features)
    3- each undependent decicion tree will be takem intp consideration and teh final result will the the most frequent value (1 or 0)


CODE PIECES:

"""

#Syntax for dividing dataset into test and training. Usually 80% is train and 20% is testing
# for this we would need an accurate dataset that gives us the type of study technique certain users should follow
x_train, x_test, y_train, y_test = train_test_split(data.drop(['technique']), data['technique'], test_size=0.2) 



# using random forest. We are going to tune teh number of trees to use
model = RandomForestClassifier(n_estimators=10) #n_estimators = # of trees
model.fit(x_train, y_train) # actually training our model with the data we have, and what we are supposed to get.
# see how accurate the model is
model.score(x_test, y_test)


# We will now see if the output we got is the one we are supposed to have
y_predicted = model.predict(x_test)
#using the confusion matrix to see how effective teh model is
conf_metr = confusion_matrix(y_test, y_predicted) # this will compare the values we are meant to get (y_test) with the ones our model got (y_predicted)

""" TO VISUALIZE CONFUSION MATRIX:
we will be using matplotlib because visual studio works well with it, it's not the best out there 
(personally prefer plotly but its complicated to set up without using jupiter notebooks)

we will import pyplot and seaborn. For thta, run this command:
    pip install matplotlib seaborn

"""
import matplotlib.pyplot as pt
import seaborn as sn

pt.figure(figsize=(10,7))
sn.heatmap(cm, annot=True)
pt.xlabel("Predicted Values")
pt.ylabel("Right Prediction")